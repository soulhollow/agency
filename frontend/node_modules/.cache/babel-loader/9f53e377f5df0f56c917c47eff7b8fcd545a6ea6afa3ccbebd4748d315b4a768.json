{"ast":null,"code":"import axios from'axios';class ApiService{constructor(){const token=localStorage.getItem('token');// Hole den Token aus dem localStorage\nthis.apiClient=axios.create({baseURL:'https://localhost:8443/api',headers:{'Content-Type':'application/json','Authorization':token?`Bearer ${token}`:''// Setze den Header, wenn ein Token vorhanden ist\n}});}// Product APIs\ngetAllProducts(){return this.apiClient.get('/products');}getProductById(id){return this.apiClient.get(`/products/${id}`);}createProduct(product){return this.apiClient.post('/products',product);}updateProduct(id,product){return this.apiClient.put(`/products/${id}`,product);}deleteProduct(id){return this.apiClient.delete(`/products/${id}`);}// Auth APIs\nlogin(loginRequest){return this.apiClient.post('/auth/login',loginRequest);}register(userDTO){return this.apiClient.post('/auth/register',userDTO);}// Order APIs\ngetAllOrders(){return this.apiClient.get('/orders');}getOrderById(id){return this.apiClient.get(`/orders/${id}`);}createOrder(orderDTO){return this.apiClient.post('/orders',orderDTO);}updateOrder(id,orderDTO){return this.apiClient.put(`/orders/${id}`,orderDTO);}deleteOrder(id){return this.apiClient.delete(`/orders/${id}`);}// Contact APIs\ncreateContactMessage(contactRequest){return this.apiClient.post('/contact/send',contactRequest);}// User API\ngetCurrentUser(){console.log(localStorage.getItem('token'));// Debugging-Ausgabe\nreturn this.apiClient.get('/auth/me',localStorage.getItem('token'));// Der Authorization-Header ist im Konstruktor enthalten\n}// Order APIs\ngetOrdersByUserId(){const userId=localStorage.getItem('userId');// Beispielhaft, passe dies je nach deinem Auth-Flow an\nreturn this.apiClient.get(`/orders/user/${userId}`);}// Payment APIs\n/*processPayment(paymentRequest) {\r\n        return this.apiClient.post('/payments', paymentRequest);\r\n    }*/}const apiServiceInstance=new ApiService();export default apiServiceInstance;","map":{"version":3,"names":["axios","ApiService","constructor","token","localStorage","getItem","apiClient","create","baseURL","headers","getAllProducts","get","getProductById","id","createProduct","product","post","updateProduct","put","deleteProduct","delete","login","loginRequest","register","userDTO","getAllOrders","getOrderById","createOrder","orderDTO","updateOrder","deleteOrder","createContactMessage","contactRequest","getCurrentUser","console","log","getOrdersByUserId","userId","apiServiceInstance"],"sources":["C:/Users/fr/website-react/react-website/src/context/ApiService.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass ApiService {\r\n    constructor() {\r\n        const token = localStorage.getItem('token');  // Hole den Token aus dem localStorage\r\n\r\n        this.apiClient = axios.create({\r\n            baseURL: 'https://localhost:8443/api', \r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token ? `Bearer ${token}` : '',  // Setze den Header, wenn ein Token vorhanden ist\r\n            },\r\n        });\r\n    }\r\n\r\n    // Product APIs\r\n    getAllProducts() {\r\n        return this.apiClient.get('/products');\r\n    }\r\n\r\n    getProductById(id) {\r\n        return this.apiClient.get(`/products/${id}`);\r\n    }\r\n\r\n    createProduct(product) {\r\n        return this.apiClient.post('/products', product);\r\n    }\r\n\r\n    updateProduct(id, product) {\r\n        return this.apiClient.put(`/products/${id}`, product);\r\n    }\r\n\r\n    deleteProduct(id) {\r\n        return this.apiClient.delete(`/products/${id}`);\r\n    }\r\n\r\n    // Auth APIs\r\n    login(loginRequest) {\r\n        return this.apiClient.post('/auth/login', loginRequest);\r\n    }\r\n\r\n    register(userDTO) {\r\n        return this.apiClient.post('/auth/register', userDTO);\r\n    }\r\n\r\n    // Order APIs\r\n    getAllOrders() {\r\n        return this.apiClient.get('/orders');\r\n    }\r\n\r\n    getOrderById(id) {\r\n        return this.apiClient.get(`/orders/${id}`);\r\n    }\r\n\r\n    createOrder(orderDTO) {\r\n        return this.apiClient.post('/orders', orderDTO);\r\n    }\r\n\r\n    updateOrder(id, orderDTO) {\r\n        return this.apiClient.put(`/orders/${id}`, orderDTO);\r\n    }\r\n\r\n    deleteOrder(id) {\r\n        return this.apiClient.delete(`/orders/${id}`);\r\n    }\r\n    // Contact APIs\r\n    createContactMessage(contactRequest) {\r\n        return this.apiClient.post('/contact/send', contactRequest);\r\n    }\r\n\r\n    // User API\r\n    getCurrentUser() {\r\n        console.log(localStorage.getItem('token')); // Debugging-Ausgabe\r\n        return this.apiClient.get('/auth/me', localStorage.getItem('token')); // Der Authorization-Header ist im Konstruktor enthalten\r\n    }\r\n\r\n    // Order APIs\r\n    getOrdersByUserId() {\r\n        const userId = localStorage.getItem('userId'); // Beispielhaft, passe dies je nach deinem Auth-Flow an\r\n        return this.apiClient.get(`/orders/user/${userId}`);\r\n    }\r\n\r\n\r\n    // Payment APIs\r\n    /*processPayment(paymentRequest) {\r\n        return this.apiClient.post('/payments', paymentRequest);\r\n    }*/\r\n}\r\n\r\n\r\nconst apiServiceInstance = new ApiService(); \r\nexport default apiServiceInstance; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}